
----------------------------------------------------------------------------------------------------------------------------------------------
animacion: gfx.o animacion.o
	g++ gfx.o animacion.o Gusano.o MovimientoRS.o MovimientoC.o -o animacion -lX11
animacion.o: animacion.cpp gusano.o 
	g++ animacion.cpp -c
gusano.o: Gusano.cpp movimientoRS.o movimientoC.o Gusano.h
	g++ Gusano.cpp -c
movimientoRS.o: MovimientoRS.cpp MovimientoRS.h
	g++ MovimientoRS.cpp -c
movimientoC.o: MovimientoC.cpp MovimientoC.h
	g++ MovimientoC.cpp -c
gfx.o: gfx.c gfx.h
	gcc gfx.c -c
----------------------------------------------------------------------------------------------------------------------------------------------

/*gfx.c*/
/*
A simple graphics library for CSE 20211 by Douglas Thain
For complete documentation, see:
http://www.nd.edu/~dthain/courses/cse20211/fall2011/gfx
Version 3, 11/07/2012 - Now much faster at changing colors rapidly.
Version 2, 9/23/2011 - Fixes a bug that could result in jerky animation.
*/

#include <X11/Xlib.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

#include "gfx.h"

/*
gfx_open creates several X11 objects, and stores them in globals
for use by the other functions in the library.
*/

static Display *gfx_display=0;
static Window  gfx_window;
static GC      gfx_gc;
static Colormap gfx_colormap;
static int      gfx_fast_color_mode = 0;

/* These values are saved by gfx_wait then retrieved later by gfx_xpos and gfx_ypos. */

static int saved_xpos = 0;
static int saved_ypos = 0;

/* Open a new graphics window. */

void gfx_open( int width, int height, const char *title )
{
	gfx_display = XOpenDisplay(0);
	if(!gfx_display) {
		fprintf(stderr,"gfx_open: unable to open the graphics window.\n");
		exit(1);
	}

	Visual *visual = DefaultVisual(gfx_display,0);
	if(visual && visual->class==TrueColor) {
		gfx_fast_color_mode = 1;
	} else {
		gfx_fast_color_mode = 0;
	}

	int blackColor = BlackPixel(gfx_display, DefaultScreen(gfx_display));
	int whiteColor = WhitePixel(gfx_display, DefaultScreen(gfx_display));

	gfx_window = XCreateSimpleWindow(gfx_display, DefaultRootWindow(gfx_display), 0, 0, width, height, 0, blackColor, blackColor);

	XSetWindowAttributes attr;
	attr.backing_store = Always;

	XChangeWindowAttributes(gfx_display,gfx_window,CWBackingStore,&attr);

	XStoreName(gfx_display,gfx_window,title);

	XSelectInput(gfx_display, gfx_window, StructureNotifyMask|KeyPressMask|ButtonPressMask);

	XMapWindow(gfx_display,gfx_window);

	gfx_gc = XCreateGC(gfx_display, gfx_window, 0, 0);

	gfx_colormap = DefaultColormap(gfx_display,0);

	XSetForeground(gfx_display, gfx_gc, whiteColor);

	// Wait for the MapNotify event

	for(;;) {
		XEvent e;
		XNextEvent(gfx_display, &e);
		if (e.type == MapNotify)
			break;
	}
}

/* Draw a single point at (x,y) */

void gfx_point( int x, int y )
{
	XDrawPoint(gfx_display,gfx_window,gfx_gc,x,y);
}

/* Draw a line from (x1,y1) to (x2,y2) */

void gfx_line( int x1, int y1, int x2, int y2 )
{
	XDrawLine(gfx_display,gfx_window,gfx_gc,x1,y1,x2,y2);
}

/* Change the current drawing color. */

void gfx_color( int r, int g, int b )
{
	XColor color;

	if(gfx_fast_color_mode) {
		/* If this is a truecolor display, we can just pick the color directly. */
		color.pixel = ((b&0xff) | ((g&0xff)<<8) | ((r&0xff)<<16) );
	} else {
		/* Otherwise, we have to allocate it from the colormap of the display. */
		color.pixel = 0;
		color.red = r<<8;
		color.green = g<<8;
		color.blue = b<<8;
		XAllocColor(gfx_display,gfx_colormap,&color);
	}

	XSetForeground(gfx_display, gfx_gc, color.pixel);
}

/* Clear the graphics window to the background color. */

void gfx_clear()
{
	XClearWindow(gfx_display,gfx_window);
}

/* Change the current background color. */

void gfx_clear_color( int r, int g, int b )
{
	XColor color;
	color.pixel = 0;
	color.red = r<<8;
	color.green = g<<8;
	color.blue = b<<8;
	XAllocColor(gfx_display,gfx_colormap,&color);

	XSetWindowAttributes attr;
	attr.background_pixel = color.pixel;
	XChangeWindowAttributes(gfx_display,gfx_window,CWBackPixel,&attr);
}

int gfx_event_waiting()
{
       XEvent event;

       gfx_flush();

       while (1) {
               if(XCheckMaskEvent(gfx_display,-1,&event)) {
                       if(event.type==KeyPress) {
                               XPutBackEvent(gfx_display,&event);
                               return 1;
                       } else if (event.type==ButtonPress) {
                               XPutBackEvent(gfx_display,&event);
                               return 1;
                       } else {
                               return 0;
                       }
               } else {
                       return 0;
               }
       }
}

/* Wait for the user to press a key or mouse button. */

char gfx_wait()
{
	XEvent event;

	gfx_flush();

	while(1) {
		XNextEvent(gfx_display,&event);

		if(event.type==KeyPress) {
			saved_xpos = event.xkey.x;
			saved_ypos = event.xkey.y;
			return XLookupKeysym(&event.xkey,0);
		} else if(event.type==ButtonPress) {
			saved_xpos = event.xkey.x;
			saved_ypos = event.xkey.y;
			return event.xbutton.button;
		}
	}
}

/* Return the X and Y coordinates of the last event. */

int gfx_xpos()
{
	return saved_xpos;
}

int gfx_ypos()
{
	return saved_ypos;
}

/* Flush all previous output to the window. */

void gfx_flush()
{
	XFlush(gfx_display);
}

----------------------------------------------------------------------------------------------------------------------------------------------

/*gfx.h*/
/*
A simple graphics library for CSE 20211 by Douglas Thain
For course assignments, you should not change this file.
For complete documentation, see:
http://www.nd.edu/~dthain/courses/cse20211/fall2011/gfx
Version 3, 11/07/2012 - Now much faster at changing colors rapidly.
Version 2, 9/23/2011 - Fixes a bug that could result in jerky animation.
*/

#if defined(__cplusplus) 
extern "C" {
#endif

#ifndef GFX_H
#define GFX_H

/* Open a new graphics window. */
void gfx_open( int width, int height, const char *title );

/* Draw a point at (x,y) */
void gfx_point( int x, int y );

/* Draw a line from (x1,y1) to (x2,y2) */
void gfx_line( int x1, int y1, int x2, int y2 );

/* Change the current drawing color. */
void gfx_color( int red, int green, int blue );

/* Clear the graphics window to the background color. */
void gfx_clear();

/* Change the current background color. */
void gfx_clear_color( int red, int green, int blue );

/* Wait for the user to press a key or mouse button. */
char gfx_wait();

/* Return the X and Y coordinates of the last event. */
int gfx_xpos();
int gfx_ypos();

/* Return the X and Y dimensions of the window. */
int gfx_xsize();
int gfx_ysize();

/* Check to see if an event is waiting. */
int gfx_event_waiting();

/* Flush all previous output to the window. */
void gfx_flush();

#endif

#if defined(__cplusplus)  
}
#endif
----------------------------------------------------------------------------------------------------------------------------------------------
/*animacion.cpp*/

#include "gfx.h"
#include <unistd.h>
#include "Gusano.h"
using namespace std;

int main(){
	cout<<"Introduzca el numero de gusanos\n";
	int n; cin>>n;
	gfx_open(800, 600, "Ejemplo Micro Animacion GFX");
	gfx_color(0,200,100);
	vector<Gusano> gusanos;
	for(int i = 0;i<n;i++){
		int x = rand()%800;
		int y = rand()%600;
		Gusano gus(x,y,50,800,600);
		gusanos.push_back(gus);
	}
	while(1){
		gfx_clear();
		for(int i = 0; i<n;i++){
			queue< pair<int,int> > q = gusanos[i].setMov();
			for(int j = 0; j<q.size();j++){
				pair<int,int> point = q.front();
				q.pop();
				gfx_line(point.first,point.second,point.first,point.second);
			}
		}
		gfx_flush();
		usleep(20666);
	}
	return 0;
}  //24 por segundo}return 0
----------------------------------------------------------------------------------------------------------------------------------------------
/*Gusano.h*/

#include <iostream>
#include <queue>
#include "MovimientoRS.h"
#include "MovimientoC.h"
#ifndef GUSANO_H_
#define GUSANO_H_
using namespace std;
class Gusano{
private:
	queue< pair<int,int> > points;
	int x,y;
	int gtam,con,mov;
	int tamx,tamy;
	bool adelante;
	MovimientoRS movRS;
	MovimientoC movC;
public:
	Gusano(int x0, int y0,int gtam, int tamx, int tamy);
	queue< pair<int,int> > setMov();
	pair<int,int> getNextLinePoint(int mov);
	void setNewEcuacion();
};

#endif
----------------------------------------------------------------------------------------------------------------------------------------------
/*Gusano.cpp*/

#include "Gusano.h"
#include "MovimientoRS.h"
#include "MovimientoC.h"
#include "gfx.h"
#include <unistd.h>
#include <math.h>
#include <algorithm>
using namespace std;

Gusano::Gusano(int x0, int y0,int gtam,int tamx, int tamy):x(x0), y(y0), gtam(gtam), 
	tamx(tamx), tamy(tamy), movRS(tamx,tamy), movC(tamx,tamy){
	
	for(int i = 0; i<gtam; i++){
		points.push(make_pair(x,y));
		x++;
	}
	x--;
	con = 0;
	adelante = true;
	mov = rand()%3;
	setNewEcuacion();
	if(mov < 2) con = gtam;
}
queue< pair<int,int> > Gusano::setMov(){
	if(mov == 2){
		points.pop();
		pair<int,int> newp = movC.getNextCirclePoint(); movC.movNextPoint();
		
		x = newp.first;
		y = newp.second;
		points.push(newp);
 
		if(movC.getiC() == 0 && movC.getjC() == 0){
			mov = rand()%3;
			movC.clearCircle();
			if(mov < 2) con = gtam;
			setNewEcuacion();

		}
	}
	if(mov < 2){
		con--;
		points.pop();
		pair<int,int> newp = getNextLinePoint(mov);

		x = newp.first;
		y = newp.second;
		points.push(newp);
 
		if(con == 0){
			mov = rand()%3; 
			if(mov < 2) con = gtam;
			setNewEcuacion();
		}
	}
	return points;
}

pair<int,int> Gusano::getNextLinePoint(int mov){
	pair<int,int> newp;
	if(mov == 0){
		if(adelante) newp = movRS.recta(x+1);
		else newp = movRS.recta(x-1);
	}else if(mov == 1){
		if(adelante) newp = movRS.serpiente(x+1);
               	else newp = movRS.serpiente(x-1);

	}
	return newp;
}

void Gusano::setNewEcuacion(){
	if(mov < 2){
		int sign = rand()%2;
		movRS.setNewEcuacion(x,y);
		if(sign) adelante = false;
		else adelante = true;
	}else{
		movC.setNewEcuacion(x,y);
	}
}
----------------------------------------------------------------------------------------------------------------------------------------------
/*MovimientoC.h*/

#include <iostream>
#include <vector>
#ifndef MOVIMIENTOC_H_
#define MOVIMIENTOC_H_
using namespace std;
class MovimientoC{
private:
	vector< vector<pair<int,int> > > circlePts;
	int iC,jC;
	int tamx,tamy;
public:
	MovimientoC(int tamx, int tamy);
	void circular(int rad, int xc, int yc);
	void setNewEcuacion(int x, int y);
	void savePoints(int x1, int y1, int xc, int yc);
	void clearCircle();
	pair<int,int> getNextCirclePoint();
	void sortCirPts();
	void movNextPoint();
	int getiC();
	int getjC();
	pair<int,int> validateP(int x, int y);
};

#endif

----------------------------------------------------------------------------------------------------------------------------------------------
/*MovimientoC.cpp*/

#include "MovimientoC.h"
#include "gfx.h"
#include <unistd.h>
#include <math.h>
#include <algorithm>
using namespace std;

MovimientoC::MovimientoC(int tamx, int tamy):tamx(tamx), tamy(tamy){
	for(int i = 0; i<8; i++){ vector<pair<int,int>> vec; circlePts.push_back(vec);}
	iC = 0; jC = 0; 
}

void MovimientoC::circular(int rad, int xc, int yc){
	int x1 = 0 , y1 = rad;
        int decesionParameter = 3 - 2 * rad;
        savePoints(xc, yc, x1, y1);
        while (y1 >= x1){
        	x1++;
                if(decesionParameter > 0)
                {
                	y1--;
                	decesionParameter = decesionParameter + 4 * (x1 - y1) + 10;
                }
                else
                	decesionParameter = decesionParameter + 4 * x1 + 6;
                savePoints(xc, yc, x1, y1); 
        }
}

void MovimientoC::setNewEcuacion(int x, int y){
	int rad = (rand()%40) + 3;
	circular(rad,x+rad,y);
}

bool ordena(pair<int,int> a, pair<int,int> b){
	if(a.first < b.first) return true;
	else if(a.first == b.first && a.second < b.second) return true;
	else return false;
}
bool ordena2(pair<int,int> a, pair<int,int> b){
        if(a.first > b.first) return true;
        else if(a.first == b.first && a.second < b.second) return true;
        else return false;
}

void MovimientoC::sortCirPts(){
	for(int i = 1; i<4; i += 2){
		sort(circlePts[i].begin(),circlePts[i].end(),ordena);
	}
	for(int i = 5; i<8; i += 2){
                sort(circlePts[i].begin(),circlePts[i].end(),ordena2);
        }

}

pair<int,int> MovimientoC::validateP(int x, int y){
	
	if(x<0) x = tamx + x;
	else if(x > tamx) y = x%tamx;
	
	if(y<0) y = tamy + y;
	else if(y > tamy) y = y%tamy;
	
	return make_pair(x,y);
}

void MovimientoC::savePoints(int xc, int yc, int x1, int y1){
	circlePts[0].push_back( validateP( xc-y1 , yc-x1 ) );
	circlePts[1].push_back( validateP( xc-x1 , yc-y1 ) );
	circlePts[2].push_back( validateP( xc+x1 , yc-y1 ) );
	circlePts[3].push_back( validateP( xc+y1 , yc-x1 ) );
	circlePts[4].push_back( validateP( xc+y1 , yc+x1 ) );
	circlePts[5].push_back( validateP( xc+x1 , yc+y1 ) );
	circlePts[6].push_back( validateP( xc-x1 , yc+y1 ) );
	circlePts[7].push_back( validateP( xc-y1 , yc+x1 ) );
	sortCirPts();
}

void MovimientoC::clearCircle(){
	for(int i = 0; i<8;i++){
        	circlePts[i].erase(circlePts[i].begin(),circlePts[i].end());
        }
}
pair<int,int> MovimientoC::getNextCirclePoint(){
	return circlePts[iC][jC];
}
void MovimientoC::movNextPoint(){
	jC++;
	if(jC >= circlePts[0].size()){ jC = 0; iC++;} 
	if(iC >= 8) iC = 0;
}
int MovimientoC::getiC(){
	return iC;
}
int MovimientoC::getjC(){
	return jC;
}
----------------------------------------------------------------------------------------------------------------------------------------------
/*MovimientoRS.h*/

#include <iostream>
#include <vector>
#ifndef MOVIMIENTORS_H_
#define MOVIMIENTORS_H_
using namespace std;

class MovimientoRS{
private:
	int m,b;
        int tamx,tamy;
public:
        MovimientoRS(int tamx, int tamy);
        pair<int,int> recta(int sigmov);
        pair<int,int> serpiente(int sigmov);
	void setNewEcuacion(int x, int y);
};
#endif

----------------------------------------------------------------------------------------------------------------------------------------------
/*MovimientoRS.cpp*/

#include "MovimientoRS.h"
#include "gfx.h"
#include <unistd.h>
#include <math.h>
#include <algorithm>
using namespace std;

MovimientoRS::MovimientoRS(int tamx, int tamy): tamx(tamx),tamy(tamy){
}

pair<int,int> MovimientoRS::recta(int sigmov){
	int x,y;
	if(sigmov < 0) x = tamx;
	else if(sigmov > tamx) x  = x%tamx;
	else x = sigmov;
	
	y = m*x + b;
	
	if(y <= 0) y = tamy - abs(y);
	else y %= tamy;
	
	return make_pair(x,y);
}

pair<int,int> MovimientoRS::serpiente(int sigmov){
	int x,y;
	if(sigmov < 0) x = tamx;
        else if(sigmov > tamx) x  = x%tamx;
        else x = sigmov;

        y = (m*x + b) + 2*sin(x);

        if(y <= 0) y = tamy - abs(y);
        else y %= tamy;

	return make_pair(x,y);
}
void MovimientoRS::setNewEcuacion(int x, int y){
	m = rand()%3;
        b = -(m*x) + y;
}
----------------------------------------------------------------------------------------------------------------------------------------------
